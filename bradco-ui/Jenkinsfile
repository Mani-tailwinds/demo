pipeline {
    agent any

    environment {
        EC2_IP = '3.109.158.179'
        SSH_USERNAME = 'ubuntu'
        REPO_URL = 'https://github.com/Mani-tailwinds/mani-devops.git'
        DOCKER_IMAGE_NAME = 'sample-ui'
        IMAGE_TAG = 'latest'
        DOCKER_CONTAINER_NAME = 'sample-ui-container'
        REPO_DIR = '/home/ubuntu/source/mani-devops'
    }

    stages {
        stage('SSH deploy') {
            steps {
                sshagent(['ssh-agent-cred']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${EC2_IP} '
                            mkdir -p /home/ubuntu/source/
                        '
                    """
                }
            }
        }
        stage('git pull') {
            steps {
                sshagent(['ssh-agent-cred']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${EC2_IP} '
                            if [ ! -d "${REPO_DIR}/.git" ]; then
                                cd /home/ubuntu/source
                                git clone ${REPO_URL}
                            else
                                cd ${REPO_DIR}
                                git pull
                            fi
                        '
                    """
                }
            }
        }
        stage('docker build') {
            steps {
                sshagent(['ssh-agent-cred']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${EC2_IP} '
                            cd ${REPO_DIR}
                            sudo docker build -t "${DOCKER_IMAGE_NAME}:${IMAGE_TAG}" .
                        '
                    """
                }
            }
        }
        stage('docker run') {
            steps {
                sshagent(['ssh-agent-cred']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${EC2_IP} '
                            cd ${REPO_DIR}
                            if [ \$(sudo docker ps -a -q -f name=${DOCKER_CONTAINER_NAME}) ]; then
                                sudo docker rm -f ${DOCKER_CONTAINER_NAME}
                            fi
                            sudo docker run -d --name ${DOCKER_CONTAINER_NAME} -p 8010:8080 ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}
                        '
                    """
                }
            }
        }
    }
}
